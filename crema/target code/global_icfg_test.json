{
  "ordered_nodes": [
    [
      "rust::main::bb0",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 0,
          "statements": [],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:6:13: 6:25 (#0), scope: scope[0] }, kind: _1 = std::boxed::Box::<i32>::new(const 90_i32) -> [return: bb1, unwind continue] }",
            "source_info": "./target code/main.rs:6:13: 6:25 (#0)",
            "function_called": "std::boxed::Box::<i32>::new",
            "arguments": [
              {
                "arg": "const 90_i32",
                "is_mutable": null
              }
            ],
            "return_place": "_1",
            "return_target": "bb1",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb1",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 1,
          "statements": [],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:8:30: 8:46 (#0), scope: scope[1] }, kind: _3 = std::boxed::Box::<i32>::into_raw(move _1) -> [return: bb2, unwind continue] }",
            "source_info": "./target code/main.rs:8:30: 8:46 (#0)",
            "function_called": "std::boxed::Box::<i32>::into_raw",
            "arguments": [
              {
                "arg": "Local(_1)",
                "is_mutable": false
              }
            ],
            "return_place": "_3",
            "return_target": "bb2",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb2",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 2,
          "statements": [
            {
              "source_info": {
                "span": "./target code/main.rs:8:30: 8:61 (#0)",
                "scope": "scope[1]"
              },
              "kind": "Assign",
              "details": "Assign((_2, move _3 as *mut std::ffi::c_void (PtrToPtr)))",
              "place": "Local(_2)",
              "is_mutable": false,
              "rvalue": "move _3 as *mut std::ffi::c_void (PtrToPtr)"
            }
          ],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:11:5: 11:33 (#0), scope: scope[2] }, kind: _4 = cast_and_free_pointer(copy _2) -> [return: bb3, unwind unreachable] }",
            "source_info": "./target code/main.rs:11:5: 11:33 (#0)",
            "function_called": "cast_and_free_pointer",
            "arguments": [
              {
                "arg": "Local(_2)",
                "is_mutable": false
              }
            ],
            "return_place": "_4",
            "return_target": "bb3",
            "unwind_target": "unreachable"
          }
        }
      }
    ],
    [
      "dummyCall::rust::main::bb2",
      {
        "node_type": "DummyCall",
        "node_data": {
          "dummy_node_name": "dummyCall",
          "incoming_edge": "rust::main::bb2",
          "outgoing_edge": "llvm::cast_and_free_pointer::node100582463853280",
          "id": "932f9f615adba60e",
          "mir_var": "Local(_2)",
          "llvm_var": "10"
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463853280",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463853280,
          "node_type": false,
          "info": "IntraICFGNode3 {fun: cast_and_free_pointer}\nAddrStmt: [Var9 <-- Var10]\t\nValVar ID: 9\n   %ptr.addr = alloca ptr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464065488,
              "stmt_type": "AddrStmt",
              "stmt_info": "AddrStmt: [Var9 <-- Var10]\t\nValVar ID: 9\n   %ptr.addr = alloca ptr, align 8 ",
              "edge_id": 6,
              "pta_edge": true,
              "lhs_var_id": 9,
              "rhs_var_id": 10,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463987312,
              "destination": 100582463853280,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463853280,
              "destination": 100582463952208,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463952208",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463952208,
          "node_type": false,
          "info": "IntraICFGNode4 {fun: cast_and_free_pointer}\nAddrStmt: [Var12 <-- Var13]\t\nValVar ID: 12\n   %int_ptr = alloca ptr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464051008,
              "stmt_type": "AddrStmt",
              "stmt_info": "AddrStmt: [Var12 <-- Var13]\t\nValVar ID: 12\n   %int_ptr = alloca ptr, align 8 ",
              "edge_id": 7,
              "pta_edge": true,
              "lhs_var_id": 12,
              "rhs_var_id": 13,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463853280,
              "destination": 100582463952208,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463952208,
              "destination": 100582463938064,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463938064",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463938064,
          "node_type": false,
          "info": "IntraICFGNode5 {fun: cast_and_free_pointer}\nStoreStmt: [Var9 <-- Var8]\t\nValVar ID: 14\n   store ptr %ptr, ptr %ptr.addr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464049808,
              "stmt_type": "StoreStmt",
              "stmt_info": "StoreStmt: [Var9 <-- Var8]\t\nValVar ID: 14\n   store ptr %ptr, ptr %ptr.addr, align 8 ",
              "edge_id": 8,
              "pta_edge": true,
              "lhs_var_id": 9,
              "rhs_var_id": 8,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463952208,
              "destination": 100582463938064,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463938064,
              "destination": 100582463760688,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463760688",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463760688,
          "node_type": false,
          "info": "IntraICFGNode6 {fun: cast_and_free_pointer}\nLoadStmt: [Var15 <-- Var9]\t\nValVar ID: 15\n   %0 = load ptr, ptr %ptr.addr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463954240,
              "stmt_type": "LoadStmt",
              "stmt_info": "LoadStmt: [Var15 <-- Var9]\t\nValVar ID: 15\n   %0 = load ptr, ptr %ptr.addr, align 8 ",
              "edge_id": 9,
              "pta_edge": true,
              "lhs_var_id": 15,
              "rhs_var_id": 9,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463938064,
              "destination": 100582463760688,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463760688,
              "destination": 100582463773216,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463773216",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463773216,
          "node_type": false,
          "info": "IntraICFGNode7 {fun: cast_and_free_pointer}\nCmpStmt: [Var16 <-- (Var15 predicate33 Var0)]\t\nValVar ID: 16\n   %cmp = icmp ne ptr %0, null ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463772272,
              "stmt_type": "CmpStmt",
              "stmt_info": "CmpStmt: [Var16 <-- (Var15 predicate33 Var0)]\t\nValVar ID: 16\n   %cmp = icmp ne ptr %0, null ",
              "edge_id": 10,
              "pta_edge": false,
              "lhs_var_id": null,
              "rhs_var_id": null,
              "res_var_id": 16,
              "operand_var_ids": [
                15,
                0
              ],
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463760688,
              "destination": 100582463773216,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463773216,
              "destination": 100582464343824,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464343824",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464343824,
          "node_type": false,
          "info": "IntraICFGNode8 {fun: cast_and_free_pointer}\nBranchStmt: [Condition Var16]\nSuccessor 0 ICFGNode9   Successor 1 ICFGNode10   \nValVar ID: 17\n   br i1 %cmp, label %if.then, label %if.end ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463959456,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: entry { \"basic block\": entry, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463857376,
              "stmt_type": "BranchStmt",
              "stmt_info": "BranchStmt: [Condition Var16]\nSuccessor 0 ICFGNode9   Successor 1 ICFGNode10   \nValVar ID: 17\n   br i1 %cmp, label %if.then, label %if.end ",
              "edge_id": 11,
              "pta_edge": false,
              "lhs_var_id": null,
              "rhs_var_id": null,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": true,
              "condition_var_id": 100582464290496,
              "successors": [
                {
                  "successor_id": 100582464217856,
                  "condition_value": 1
                },
                {
                  "successor_id": 100582464184256,
                  "condition_value": 0
                }
              ]
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463773216,
              "destination": 100582464343824,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464343824,
              "destination": 100582464217856,
              "edge_type": "intra"
            },
            {
              "source": 100582464343824,
              "destination": 100582464184256,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464217856",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464217856,
          "node_type": false,
          "info": "IntraICFGNode9 {fun: cast_and_free_pointer}\nLoadStmt: [Var18 <-- Var9]\t\nValVar ID: 18\n   %1 = load ptr, ptr %ptr.addr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463833472,
              "stmt_type": "LoadStmt",
              "stmt_info": "LoadStmt: [Var18 <-- Var9]\t\nValVar ID: 18\n   %1 = load ptr, ptr %ptr.addr, align 8 ",
              "edge_id": 12,
              "pta_edge": true,
              "lhs_var_id": 18,
              "rhs_var_id": 9,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582464343824,
              "destination": 100582464217856,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464217856,
              "destination": 100582464183952,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464184256",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464184256,
          "node_type": false,
          "info": "IntraICFGNode10 {fun: cast_and_free_pointer}\n   ret void ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766656,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.end { \"basic block\": if.end, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582464343824,
              "destination": 100582464184256,
              "edge_type": "intra"
            },
            {
              "source": 100582464396320,
              "destination": 100582464184256,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464184256,
              "destination": 100582463950896,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464183952",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464183952,
          "node_type": false,
          "info": "IntraICFGNode11 {fun: cast_and_free_pointer}\nCopyStmt: [Var19 <-- Var18]\t\nValVar ID: 19\n   %2 = bitcast ptr %1 to ptr ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463816016,
              "stmt_type": "AssignStmt",
              "stmt_info": "CopyStmt: [Var19 <-- Var18]\t\nValVar ID: 19\n   %2 = bitcast ptr %1 to ptr ",
              "edge_id": 13,
              "pta_edge": true,
              "lhs_var_id": 19,
              "rhs_var_id": 18,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582464217856,
              "destination": 100582464183952,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464183952,
              "destination": 100582463779536,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463950896",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463950896,
          "node_type": false,
          "info": "FunExitICFGNode2 {fun: cast_and_free_pointer}",
          "node_kind_string": "FunExitBlock",
          "node_kind": 3,
          "node_source_loc": "function ret: ",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766656,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.end { \"basic block\": if.end, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582464184256,
              "destination": 100582463950896,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": []
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463779536",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463779536,
          "node_type": false,
          "info": "IntraICFGNode12 {fun: cast_and_free_pointer}\nStoreStmt: [Var12 <-- Var19]\t\nValVar ID: 20\n   store ptr %2, ptr %int_ptr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464335984,
              "stmt_type": "StoreStmt",
              "stmt_info": "StoreStmt: [Var12 <-- Var19]\t\nValVar ID: 20\n   store ptr %2, ptr %int_ptr, align 8 ",
              "edge_id": 14,
              "pta_edge": true,
              "lhs_var_id": 12,
              "rhs_var_id": 19,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582464183952,
              "destination": 100582463779536,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463779536,
              "destination": 100582463833648,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463833648",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463833648,
          "node_type": false,
          "info": "IntraICFGNode13 {fun: cast_and_free_pointer}\nLoadStmt: [Var21 <-- Var12]\t\nValVar ID: 21\n   %3 = load ptr, ptr %int_ptr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463838528,
              "stmt_type": "LoadStmt",
              "stmt_info": "LoadStmt: [Var21 <-- Var12]\t\nValVar ID: 21\n   %3 = load ptr, ptr %int_ptr, align 8 ",
              "edge_id": 15,
              "pta_edge": true,
              "lhs_var_id": 21,
              "rhs_var_id": 12,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463779536,
              "destination": 100582463833648,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463833648,
              "destination": 100582463835552,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463835552",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463835552,
          "node_type": false,
          "info": "IntraICFGNode14 {fun: cast_and_free_pointer}\nLoadStmt: [Var22 <-- Var21]\t\nValVar ID: 22\n   %4 = load i32, ptr %3, align 4 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463963872,
              "stmt_type": "LoadStmt",
              "stmt_info": "LoadStmt: [Var22 <-- Var21]\t\nValVar ID: 22\n   %4 = load i32, ptr %3, align 4 ",
              "edge_id": 16,
              "pta_edge": false,
              "lhs_var_id": 22,
              "rhs_var_id": 21,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463833648,
              "destination": 100582463835552,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463835552,
              "destination": 100582464229376,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464229376",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464229376,
          "node_type": true,
          "info": "CallICFGNode15 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) CallICFGNode: ",
          "node_kind_string": "FunCallBlock",
          "node_kind": 4,
          "node_source_loc": "CallICFGNode: ",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582463835552,
              "destination": 100582464229376,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464229376,
              "destination": 100582463831728,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463831728",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463831728,
          "node_type": true,
          "info": "RetICFGNode16 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) RetICFGNode: ",
          "node_kind_string": "FunRetBlock",
          "node_kind": 5,
          "node_source_loc": "RetICFGNode: ",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582464229376,
              "destination": 100582463831728,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463831728,
              "destination": 100582463814928,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463814928",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463814928,
          "node_type": false,
          "info": "IntraICFGNode17 {fun: cast_and_free_pointer}\nLoadStmt: [Var26 <-- Var12]\t\nValVar ID: 26\n   %5 = load ptr, ptr %int_ptr, align 8 ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464133792,
              "stmt_type": "LoadStmt",
              "stmt_info": "LoadStmt: [Var26 <-- Var12]\t\nValVar ID: 26\n   %5 = load ptr, ptr %int_ptr, align 8 ",
              "edge_id": 17,
              "pta_edge": true,
              "lhs_var_id": 26,
              "rhs_var_id": 12,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463831728,
              "destination": 100582463814928,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463814928,
              "destination": 100582464384208,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464384208",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464384208,
          "node_type": false,
          "info": "IntraICFGNode18 {fun: cast_and_free_pointer}\nCopyStmt: [Var27 <-- Var26]\t\nValVar ID: 27\n   %6 = bitcast ptr %5 to ptr ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582464133952,
              "stmt_type": "AssignStmt",
              "stmt_info": "CopyStmt: [Var27 <-- Var26]\t\nValVar ID: 27\n   %6 = bitcast ptr %5 to ptr ",
              "edge_id": 18,
              "pta_edge": true,
              "lhs_var_id": 27,
              "rhs_var_id": 26,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": null,
              "condition_var_id": null,
              "successors": null
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463814928,
              "destination": 100582464384208,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464384208,
              "destination": 100582464339392,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464339392",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464339392,
          "node_type": true,
          "info": "CallICFGNode19 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 CallICFGNode: ",
          "node_kind_string": "FunCallBlock",
          "node_kind": 4,
          "node_source_loc": "CallICFGNode: ",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582464384208,
              "destination": 100582464339392,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464339392,
              "destination": 100582463969248,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582463969248",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582463969248,
          "node_type": true,
          "info": "RetICFGNode20 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 RetICFGNode: ",
          "node_kind_string": "FunRetBlock",
          "node_kind": 5,
          "node_source_loc": "RetICFGNode: ",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [],
          "incoming_edges": [
            {
              "source": 100582464339392,
              "destination": 100582463969248,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582463969248,
              "destination": 100582464396320,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "llvm::cast_and_free_pointer::node100582464396320",
      {
        "node_type": "Llvm",
        "node_data": {
          "node_id": 100582464396320,
          "node_type": false,
          "info": "IntraICFGNode21 {fun: cast_and_free_pointer}\nBranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode10   \nValVar ID: 31\n   br label %if.end ",
          "node_kind_string": "IntraBlock",
          "node_kind": 0,
          "node_source_loc": "",
          "function_name": "cast_and_free_pointer",
          "basic_block": 100582463766000,
          "basic_block_name": null,
          "basic_block_info": "BasicBlock: if.then { \"basic block\": if.then, \"location\":  }",
          "svf_statements": [
            {
              "stmt_id": 100582463952064,
              "stmt_type": "BranchStmt",
              "stmt_info": "BranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode10   \nValVar ID: 31\n   br label %if.end ",
              "edge_id": 19,
              "pta_edge": false,
              "lhs_var_id": null,
              "rhs_var_id": null,
              "res_var_id": null,
              "operand_var_ids": null,
              "call_inst": null,
              "is_conditional": false,
              "condition_var_id": null,
              "successors": [
                {
                  "successor_id": 100582464184256,
                  "condition_value": 1
                }
              ]
            }
          ],
          "incoming_edges": [
            {
              "source": 100582463969248,
              "destination": 100582464396320,
              "edge_type": "intra"
            }
          ],
          "outgoing_edges": [
            {
              "source": 100582464396320,
              "destination": 100582464184256,
              "edge_type": "intra"
            }
          ]
        }
      }
    ],
    [
      "dummyRet::rust::main::bb3",
      {
        "node_type": "DummyRet",
        "node_data": {
          "dummy_node_name": "dummyRet",
          "incoming_edge": "llvm::cast_and_free_pointer::node100582463950896",
          "outgoing_edge": "rust::main::bb3",
          "id": "bc3b4ff137e2effe",
          "mir_var": null,
          "llvm_var": "BasicBlock: if.end { \"basic block\": if.end, \"location\":  }"
        }
      }
    ],
    [
      "rust::main::bb3",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 3,
          "statements": [],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:16:9: 16:24 (#0), scope: scope[2] }, kind: _5 = std::ptr::mut_ptr::<impl *mut std::ffi::c_void>::is_null(copy _2) -> [return: bb4, unwind continue] }",
            "source_info": "./target code/main.rs:16:9: 16:24 (#0)",
            "function_called": "std::ptr::mut_ptr::<impl *mut std::ffi::c_void>::is_null",
            "arguments": [
              {
                "arg": "Local(_2)",
                "is_mutable": false
              }
            ],
            "return_place": "_5",
            "return_target": "bb4",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb4",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 4,
          "statements": [],
          "terminator": {
            "kind": "SwitchInt",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:16:9: 16:24 (#0), scope: scope[2] }, kind: switchInt(move _5) -> [0: bb5, otherwise: bb13] }",
            "source_info": "./target code/main.rs:16:9: 16:24 (#0)",
            "targets": [
              "(0, bb5)"
            ],
            "discr": "move _5",
            "otherwise": "bb13"
          }
        }
      }
    ],
    [
      "rust::main::bb5",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 5,
          "statements": [
            {
              "source_info": {
                "span": "./target code/main.rs:17:19: 17:36 (#0)",
                "scope": "scope[2]"
              },
              "kind": "Assign",
              "details": "Assign((_6, copy _2 as *mut i32 (PtrToPtr)))",
              "place": "Local(_6)",
              "is_mutable": false,
              "rvalue": "copy _2 as *mut i32 (PtrToPtr)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:18:14: 18:36 (#0)",
                "scope": "scope[3]"
              },
              "kind": "Assign",
              "details": "Assign((_9, const main::promoted[0]))",
              "place": "Local(_9)",
              "is_mutable": false,
              "rvalue": "const main::promoted[0]"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:18:38: 18:46 (#5)",
                "scope": "scope[3]"
              },
              "kind": "Assign",
              "details": "Assign((_13, &(*_6)))",
              "place": "Local(_13)",
              "is_mutable": false,
              "rvalue": "&(*_6)"
            }
          ],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:18:33: 18:35 (#5), scope: scope[3] }, kind: _12 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _13) -> [return: bb6, unwind continue] }",
            "source_info": "./target code/main.rs:18:33: 18:35 (#5)",
            "function_called": "core::fmt::rt::Argument::<'_>::new_display::<i32>",
            "arguments": [
              {
                "arg": "Local(_13)",
                "is_mutable": false
              }
            ],
            "return_place": "_12",
            "return_target": "bb6",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb6",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 6,
          "statements": [
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5)",
                "scope": "scope[3]"
              },
              "kind": "Assign",
              "details": "Assign((_11, [move _12]))",
              "place": "Local(_11)",
              "is_mutable": false,
              "rvalue": "[move _12]"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5)",
                "scope": "scope[3]"
              },
              "kind": "Assign",
              "details": "Assign((_10, &_11))",
              "place": "Local(_10)",
              "is_mutable": false,
              "rvalue": "&_11"
            }
          ],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: /home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5), scope: scope[3] }, kind: _8 = std::fmt::Arguments::<'_>::new_v1::<2, 1>(copy _9, copy _10) -> [return: bb7, unwind continue] }",
            "source_info": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:28: 143:61 (#5)",
            "function_called": "std::fmt::Arguments::<'_>::new_v1::<2, 1>",
            "arguments": [
              {
                "arg": "Local(_9)",
                "is_mutable": false
              },
              {
                "arg": "Local(_10)",
                "is_mutable": false
              }
            ],
            "return_place": "_8",
            "return_target": "bb7",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb7",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 7,
          "statements": [],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: /home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:62 (#4), scope: scope[3] }, kind: _7 = std::io::_print(move _8) -> [return: bb8, unwind continue] }",
            "source_info": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:143:9: 143:62 (#4)",
            "function_called": "std::io::_print",
            "arguments": [
              {
                "arg": "Local(_8) [mutable]",
                "is_mutable": true
              }
            ],
            "return_place": "_7",
            "return_target": "bb8",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb8",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 8,
          "statements": [],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:19:16: 19:27 (#0), scope: scope[3] }, kind: _14 = std::boxed::Box::<i32>::new(const 6_i32) -> [return: bb9, unwind continue] }",
            "source_info": "./target code/main.rs:19:16: 19:27 (#0)",
            "function_called": "std::boxed::Box::<i32>::new",
            "arguments": [
              {
                "arg": "const 6_i32",
                "is_mutable": null
              }
            ],
            "return_place": "_14",
            "return_target": "bb9",
            "unwind_target": "continue"
          }
        }
      }
    ],
    [
      "rust::main::bb9",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 9,
          "statements": [
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_21, copy (((_14.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32)))",
              "place": "Local(_21) [mutable]",
              "is_mutable": true,
              "rvalue": "copy (((_14.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_29, copy _21 as *const () (PtrToPtr)))",
              "place": "Local(_29) [mutable]",
              "is_mutable": true,
              "rvalue": "copy _21 as *const () (PtrToPtr)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_30, copy _29 as usize (Transmute)))",
              "place": "Local(_30) [mutable]",
              "is_mutable": true,
              "rvalue": "copy _29 as usize (Transmute)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_31, AlignOf(i32)))",
              "place": "Local(_31) [mutable]",
              "is_mutable": true,
              "rvalue": "AlignOf(i32)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_32, Sub(copy _31, const 1_usize)))",
              "place": "Local(_32) [mutable]",
              "is_mutable": true,
              "rvalue": "Sub(copy _31, const 1_usize)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_33, BitAnd(copy _30, copy _32)))",
              "place": "Local(_33) [mutable]",
              "is_mutable": true,
              "rvalue": "BitAnd(copy _30, copy _32)"
            },
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_34, Eq(copy _33, const 0_usize)))",
              "place": "Local(_34) [mutable]",
              "is_mutable": true,
              "rvalue": "Eq(copy _33, const 0_usize)"
            }
          ],
          "terminator": {
            "kind": "Assert",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:20:5: 20:13 (#0), scope: scope[4] }, kind: assert(copy _34, \"misaligned pointer dereference: address must be a multiple of {} but is {}\", copy _31, copy _30) -> [success: bb17, unwind unreachable] }",
            "source_info": "./target code/main.rs:20:5: 20:13 (#0)",
            "return_target": "bb17",
            "unwind_target": "unreachable",
            "cond": "copy _34",
            "expected": true,
            "msg": "MisalignedPointerDereference { required: copy _31, found: copy _30 }"
          }
        }
      }
    ],
    [
      "rust::main::bb10",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 10,
          "statements": [
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_20, ShallowInitBox(move _19, [i32; 2])))",
              "place": "Local(_20) [mutable]",
              "is_mutable": true,
              "rvalue": "ShallowInitBox(move _19, [i32; 2])"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_22, copy (((_20.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2])))",
              "place": "Local(_22) [mutable]",
              "is_mutable": true,
              "rvalue": "copy (((_20.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2])"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_23, copy _22 as *const () (PtrToPtr)))",
              "place": "Local(_23) [mutable]",
              "is_mutable": true,
              "rvalue": "copy _22 as *const () (PtrToPtr)"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_24, copy _23 as usize (Transmute)))",
              "place": "Local(_24) [mutable]",
              "is_mutable": true,
              "rvalue": "copy _23 as usize (Transmute)"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_25, AlignOf([i32; 2])))",
              "place": "Local(_25) [mutable]",
              "is_mutable": true,
              "rvalue": "AlignOf([i32; 2])"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_26, Sub(copy _25, const 1_usize)))",
              "place": "Local(_26) [mutable]",
              "is_mutable": true,
              "rvalue": "Sub(copy _25, const 1_usize)"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_27, BitAnd(copy _24, copy _26)))",
              "place": "Local(_27) [mutable]",
              "is_mutable": true,
              "rvalue": "BitAnd(copy _24, copy _26)"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_28, Eq(copy _27, const 0_usize)))",
              "place": "Local(_28) [mutable]",
              "is_mutable": true,
              "rvalue": "Eq(copy _27, const 0_usize)"
            }
          ],
          "terminator": {
            "kind": "Assert",
            "details": "Terminator { source_info: SourceInfo { span: /home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6), scope: scope[4] }, kind: assert(copy _28, \"misaligned pointer dereference: address must be a multiple of {} but is {}\", copy _25, copy _24) -> [success: bb16, unwind unreachable] }",
            "source_info": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
            "return_target": "bb16",
            "unwind_target": "unreachable",
            "cond": "copy _28",
            "expected": true,
            "msg": "MisalignedPointerDereference { required: copy _25, found: copy _24 }"
          }
        }
      }
    ],
    [
      "rust::main::bb11",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 11,
          "statements": [],
          "terminator": {
            "kind": "Drop",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:24:2: 24:3 (#0), scope: scope[4] }, kind: drop(_15) -> [return: bb12, unwind: bb14] }",
            "source_info": "./target code/main.rs:24:2: 24:3 (#0)",
            "return_target": "bb12",
            "unwind_target": "cleanup(bb14)",
            "dropped_value": "Local(_15) [mutable]",
            "is_mutable": true
          }
        }
      }
    ],
    [
      "rust::main::bb12",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 12,
          "statements": [],
          "terminator": {
            "kind": "Drop",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:24:2: 24:3 (#0), scope: scope[3] }, kind: drop(_14) -> [return: bb13, unwind continue] }",
            "source_info": "./target code/main.rs:24:2: 24:3 (#0)",
            "return_target": "bb13",
            "unwind_target": "continue",
            "dropped_value": "Local(_14) [mutable]",
            "is_mutable": true
          }
        }
      }
    ],
    [
      "rust::main::bb13",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 13,
          "statements": [],
          "terminator": {
            "kind": "Return",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:24:5: 24:5 (#0), scope: scope[0] }, kind: return }",
            "source_info": "./target code/main.rs:24:5: 24:5 (#0)"
          }
        }
      }
    ],
    [
      "rust::main::bb14",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 14,
          "statements": [],
          "terminator": {
            "kind": "Drop",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:24:2: 24:3 (#0), scope: scope[3] }, kind: drop(_14) -> [return: bb15, unwind terminate(cleanup)] }",
            "source_info": "./target code/main.rs:24:2: 24:3 (#0)",
            "return_target": "bb15",
            "unwind_target": "terminate",
            "dropped_value": "Local(_14) [mutable]",
            "is_mutable": true
          }
        }
      }
    ],
    [
      "rust::main::bb15",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 15,
          "statements": [],
          "terminator": {
            "kind": "UnwindResume",
            "details": "Terminator { source_info: SourceInfo { span: ./target code/main.rs:4:1: 24:5 (#0), scope: scope[0] }, kind: resume }",
            "source_info": "./target code/main.rs:4:1: 24:5 (#0)"
          }
        }
      }
    ],
    [
      "rust::main::bb16",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 16,
          "statements": [
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:37: 54:46 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign(((*_22), [const 78_i32, const 89_i32]))",
              "place": "Local(_22) [mutable] -> *",
              "is_mutable": true,
              "rvalue": "[const 78_i32, const 89_i32]"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_16, move _20 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit))))",
              "place": "Local(_16) [mutable]",
              "is_mutable": true,
              "rvalue": "move _20 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit))"
            }
          ],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: /home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#6), scope: scope[4] }, kind: _15 = std::slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _16) -> [return: bb11, unwind: bb14] }",
            "source_info": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:50:9: 55:10 (#6)",
            "function_called": "std::slice::<impl [i32]>::into_vec::<std::alloc::Global>",
            "arguments": [
              {
                "arg": "Local(_16) [mutable]",
                "is_mutable": true
              }
            ],
            "return_place": "_15",
            "return_target": "bb11",
            "unwind_target": "cleanup(bb14)"
          }
        }
      }
    ],
    [
      "rust::main::bb17",
      {
        "node_type": "Mir",
        "node_data": {
          "block_id": 17,
          "statements": [
            {
              "source_info": {
                "span": "./target code/main.rs:20:5: 20:13 (#0)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign(((*_21), const 5777_i32))",
              "place": "Local(_21) [mutable] -> *",
              "is_mutable": true,
              "rvalue": "const 5777_i32"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_17, SizeOf([i32; 2])))",
              "place": "Local(_17) [mutable]",
              "is_mutable": true,
              "rvalue": "SizeOf([i32; 2])"
            },
            {
              "source_info": {
                "span": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6)",
                "scope": "scope[4]"
              },
              "kind": "Assign",
              "details": "Assign((_18, AlignOf([i32; 2])))",
              "place": "Local(_18) [mutable]",
              "is_mutable": true,
              "rvalue": "AlignOf([i32; 2])"
            }
          ],
          "terminator": {
            "kind": "Call",
            "details": "Terminator { source_info: SourceInfo { span: /home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6), scope: scope[4] }, kind: _19 = alloc::alloc::exchange_malloc(move _17, move _18) -> [return: bb10, unwind: bb14] }",
            "source_info": "/home/af/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:54:13: 54:47 (#6)",
            "function_called": "alloc::alloc::exchange_malloc",
            "arguments": [
              {
                "arg": "Local(_17) [mutable]",
                "is_mutable": true
              },
              {
                "arg": "Local(_18) [mutable]",
                "is_mutable": true
              }
            ],
            "return_place": "_19",
            "return_target": "bb10",
            "unwind_target": "cleanup(bb14)"
          }
        }
      }
    ]
  ],
  "icfg_edges": [
    {
      "source": "rust::main::bb0",
      "destination": "rust::main::bb1",
      "label": "Call return",
      "source_label": "Mir bb0",
      "destination_label": "Mir bb1"
    },
    {
      "source": "rust::main::bb1",
      "destination": "rust::main::bb2",
      "label": "Call return",
      "source_label": "Mir bb1",
      "destination_label": "Mir bb2"
    },
    {
      "source": "rust::main::bb2",
      "destination": "dummyCall::rust::main::bb2",
      "label": "FFI Call",
      "source_label": "Mir bb2",
      "destination_label": "dummyCall (id: 932f9f615adba60e)"
    },
    {
      "source": "dummyCall::rust::main::bb2",
      "destination": "llvm::cast_and_free_pointer::node100582463853280",
      "label": "dummyCall->LLVM Entry",
      "source_label": "dummyCall (id: 932f9f615adba60e)",
      "destination_label": "IntraICFGNode3 {fun: cast_and_free_pointer}\nAddrStmt: [Var9 <-- Var10]\t\nValVar ID: 9\n   %ptr.addr = alloca ptr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463950896",
      "destination": "dummyRet::rust::main::bb3",
      "label": "LLVM Exit->dummyRet",
      "source_label": "FunExitICFGNode2 {fun: cast_and_free_pointer}",
      "destination_label": "dummyRet (id: bc3b4ff137e2effe)"
    },
    {
      "source": "dummyRet::rust::main::bb3",
      "destination": "rust::main::bb3",
      "label": "dummyRet->MIR Return",
      "source_label": "dummyRet (id: bc3b4ff137e2effe)",
      "destination_label": "Mir bb3"
    },
    {
      "source": "rust::main::bb3",
      "destination": "rust::main::bb4",
      "label": "Call return",
      "source_label": "Mir bb3",
      "destination_label": "Mir bb4"
    },
    {
      "source": "rust::main::bb4",
      "destination": "rust::main::bb5",
      "label": "SwitchInt target",
      "source_label": "Mir bb4",
      "destination_label": "Mir bb5"
    },
    {
      "source": "rust::main::bb4",
      "destination": "rust::main::bb13",
      "label": "SwitchInt otherwise",
      "source_label": "Mir bb4",
      "destination_label": "Mir bb13"
    },
    {
      "source": "rust::main::bb5",
      "destination": "rust::main::bb6",
      "label": "Call return",
      "source_label": "Mir bb5",
      "destination_label": "Mir bb6"
    },
    {
      "source": "rust::main::bb6",
      "destination": "rust::main::bb7",
      "label": "Call return",
      "source_label": "Mir bb6",
      "destination_label": "Mir bb7"
    },
    {
      "source": "rust::main::bb7",
      "destination": "rust::main::bb8",
      "label": "Call return",
      "source_label": "Mir bb7",
      "destination_label": "Mir bb8"
    },
    {
      "source": "rust::main::bb8",
      "destination": "rust::main::bb9",
      "label": "Call return",
      "source_label": "Mir bb8",
      "destination_label": "Mir bb9"
    },
    {
      "source": "rust::main::bb9",
      "destination": "rust::main::bb17",
      "label": "Assert success",
      "source_label": "Mir bb9",
      "destination_label": "Mir bb17"
    },
    {
      "source": "rust::main::bb10",
      "destination": "rust::main::bb16",
      "label": "Assert success",
      "source_label": "Mir bb10",
      "destination_label": "Mir bb16"
    },
    {
      "source": "rust::main::bb11",
      "destination": "rust::main::bb12",
      "label": "Drop return",
      "source_label": "Mir bb11",
      "destination_label": "Mir bb12"
    },
    {
      "source": "rust::main::bb11",
      "destination": "rust::main::bb14",
      "label": "Drop unwind",
      "source_label": "Mir bb11",
      "destination_label": "Mir bb14"
    },
    {
      "source": "rust::main::bb12",
      "destination": "rust::main::bb13",
      "label": "Drop return",
      "source_label": "Mir bb12",
      "destination_label": "Mir bb13"
    },
    {
      "source": "rust::main::bb14",
      "destination": "rust::main::bb15",
      "label": "Drop return",
      "source_label": "Mir bb14",
      "destination_label": "Mir bb15"
    },
    {
      "source": "rust::main::bb14",
      "destination": "rust::main::terminate",
      "label": "Drop unwind",
      "source_label": "Mir bb14",
      "destination_label": null
    },
    {
      "source": "rust::main::bb16",
      "destination": "rust::main::bb11",
      "label": "Call return",
      "source_label": "Mir bb16",
      "destination_label": "Mir bb11"
    },
    {
      "source": "rust::main::bb16",
      "destination": "rust::main::bb14",
      "label": "Call unwind",
      "source_label": "Mir bb16",
      "destination_label": "Mir bb14"
    },
    {
      "source": "rust::main::bb17",
      "destination": "rust::main::bb10",
      "label": "Call return",
      "source_label": "Mir bb17",
      "destination_label": "Mir bb10"
    },
    {
      "source": "rust::main::bb17",
      "destination": "rust::main::bb14",
      "label": "Call unwind",
      "source_label": "Mir bb17",
      "destination_label": "Mir bb14"
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463760688",
      "destination": "llvm::cast_and_free_pointer::node100582463773216",
      "label": "LLVM",
      "source_label": "IntraICFGNode6 {fun: cast_and_free_pointer}\nLoadStmt: [Var15 <-- Var9]\t\nValVar ID: 15\n   %0 = load ptr, ptr %ptr.addr, align 8 ",
      "destination_label": "IntraICFGNode7 {fun: cast_and_free_pointer}\nCmpStmt: [Var16 <-- (Var15 predicate33 Var0)]\t\nValVar ID: 16\n   %cmp = icmp ne ptr %0, null "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463773216",
      "destination": "llvm::cast_and_free_pointer::node100582464343824",
      "label": "LLVM",
      "source_label": "IntraICFGNode7 {fun: cast_and_free_pointer}\nCmpStmt: [Var16 <-- (Var15 predicate33 Var0)]\t\nValVar ID: 16\n   %cmp = icmp ne ptr %0, null ",
      "destination_label": "IntraICFGNode8 {fun: cast_and_free_pointer}\nBranchStmt: [Condition Var16]\nSuccessor 0 ICFGNode9   Successor 1 ICFGNode10   \nValVar ID: 17\n   br i1 %cmp, label %if.then, label %if.end "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463779536",
      "destination": "llvm::cast_and_free_pointer::node100582463833648",
      "label": "LLVM",
      "source_label": "IntraICFGNode12 {fun: cast_and_free_pointer}\nStoreStmt: [Var12 <-- Var19]\t\nValVar ID: 20\n   store ptr %2, ptr %int_ptr, align 8 ",
      "destination_label": "IntraICFGNode13 {fun: cast_and_free_pointer}\nLoadStmt: [Var21 <-- Var12]\t\nValVar ID: 21\n   %3 = load ptr, ptr %int_ptr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463814928",
      "destination": "llvm::cast_and_free_pointer::node100582464384208",
      "label": "LLVM",
      "source_label": "IntraICFGNode17 {fun: cast_and_free_pointer}\nLoadStmt: [Var26 <-- Var12]\t\nValVar ID: 26\n   %5 = load ptr, ptr %int_ptr, align 8 ",
      "destination_label": "IntraICFGNode18 {fun: cast_and_free_pointer}\nCopyStmt: [Var27 <-- Var26]\t\nValVar ID: 27\n   %6 = bitcast ptr %5 to ptr "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463831728",
      "destination": "llvm::cast_and_free_pointer::node100582463814928",
      "label": "LLVM",
      "source_label": "RetICFGNode16 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) RetICFGNode: ",
      "destination_label": "IntraICFGNode17 {fun: cast_and_free_pointer}\nLoadStmt: [Var26 <-- Var12]\t\nValVar ID: 26\n   %5 = load ptr, ptr %int_ptr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463833648",
      "destination": "llvm::cast_and_free_pointer::node100582463835552",
      "label": "LLVM",
      "source_label": "IntraICFGNode13 {fun: cast_and_free_pointer}\nLoadStmt: [Var21 <-- Var12]\t\nValVar ID: 21\n   %3 = load ptr, ptr %int_ptr, align 8 ",
      "destination_label": "IntraICFGNode14 {fun: cast_and_free_pointer}\nLoadStmt: [Var22 <-- Var21]\t\nValVar ID: 22\n   %4 = load i32, ptr %3, align 4 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463835552",
      "destination": "llvm::cast_and_free_pointer::node100582464229376",
      "label": "LLVM",
      "source_label": "IntraICFGNode14 {fun: cast_and_free_pointer}\nLoadStmt: [Var22 <-- Var21]\t\nValVar ID: 22\n   %4 = load i32, ptr %3, align 4 ",
      "destination_label": "CallICFGNode15 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) CallICFGNode: "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463853280",
      "destination": "llvm::cast_and_free_pointer::node100582463952208",
      "label": "LLVM",
      "source_label": "IntraICFGNode3 {fun: cast_and_free_pointer}\nAddrStmt: [Var9 <-- Var10]\t\nValVar ID: 9\n   %ptr.addr = alloca ptr, align 8 ",
      "destination_label": "IntraICFGNode4 {fun: cast_and_free_pointer}\nAddrStmt: [Var12 <-- Var13]\t\nValVar ID: 12\n   %int_ptr = alloca ptr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463938064",
      "destination": "llvm::cast_and_free_pointer::node100582463760688",
      "label": "LLVM",
      "source_label": "IntraICFGNode5 {fun: cast_and_free_pointer}\nStoreStmt: [Var9 <-- Var8]\t\nValVar ID: 14\n   store ptr %ptr, ptr %ptr.addr, align 8 ",
      "destination_label": "IntraICFGNode6 {fun: cast_and_free_pointer}\nLoadStmt: [Var15 <-- Var9]\t\nValVar ID: 15\n   %0 = load ptr, ptr %ptr.addr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463952208",
      "destination": "llvm::cast_and_free_pointer::node100582463938064",
      "label": "LLVM",
      "source_label": "IntraICFGNode4 {fun: cast_and_free_pointer}\nAddrStmt: [Var12 <-- Var13]\t\nValVar ID: 12\n   %int_ptr = alloca ptr, align 8 ",
      "destination_label": "IntraICFGNode5 {fun: cast_and_free_pointer}\nStoreStmt: [Var9 <-- Var8]\t\nValVar ID: 14\n   store ptr %ptr, ptr %ptr.addr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582463969248",
      "destination": "llvm::cast_and_free_pointer::node100582464396320",
      "label": "LLVM",
      "source_label": "RetICFGNode20 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 RetICFGNode: ",
      "destination_label": "IntraICFGNode21 {fun: cast_and_free_pointer}\nBranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode10   \nValVar ID: 31\n   br label %if.end "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464183952",
      "destination": "llvm::cast_and_free_pointer::node100582463779536",
      "label": "LLVM",
      "source_label": "IntraICFGNode11 {fun: cast_and_free_pointer}\nCopyStmt: [Var19 <-- Var18]\t\nValVar ID: 19\n   %2 = bitcast ptr %1 to ptr ",
      "destination_label": "IntraICFGNode12 {fun: cast_and_free_pointer}\nStoreStmt: [Var12 <-- Var19]\t\nValVar ID: 20\n   store ptr %2, ptr %int_ptr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464184256",
      "destination": "llvm::cast_and_free_pointer::node100582463950896",
      "label": "LLVM",
      "source_label": "IntraICFGNode10 {fun: cast_and_free_pointer}\n   ret void ",
      "destination_label": "FunExitICFGNode2 {fun: cast_and_free_pointer}"
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464217856",
      "destination": "llvm::cast_and_free_pointer::node100582464183952",
      "label": "LLVM",
      "source_label": "IntraICFGNode9 {fun: cast_and_free_pointer}\nLoadStmt: [Var18 <-- Var9]\t\nValVar ID: 18\n   %1 = load ptr, ptr %ptr.addr, align 8 ",
      "destination_label": "IntraICFGNode11 {fun: cast_and_free_pointer}\nCopyStmt: [Var19 <-- Var18]\t\nValVar ID: 19\n   %2 = bitcast ptr %1 to ptr "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464229376",
      "destination": "llvm::cast_and_free_pointer::node100582463831728",
      "label": "LLVM",
      "source_label": "CallICFGNode15 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) CallICFGNode: ",
      "destination_label": "RetICFGNode16 {fun: cast_and_free_pointer}\n   %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %4) RetICFGNode: "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464339392",
      "destination": "llvm::cast_and_free_pointer::node100582463969248",
      "label": "LLVM",
      "source_label": "CallICFGNode19 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 CallICFGNode: ",
      "destination_label": "RetICFGNode20 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 RetICFGNode: "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464343824",
      "destination": "llvm::cast_and_free_pointer::node100582464184256",
      "label": "LLVM",
      "source_label": "IntraICFGNode8 {fun: cast_and_free_pointer}\nBranchStmt: [Condition Var16]\nSuccessor 0 ICFGNode9   Successor 1 ICFGNode10   \nValVar ID: 17\n   br i1 %cmp, label %if.then, label %if.end ",
      "destination_label": "IntraICFGNode10 {fun: cast_and_free_pointer}\n   ret void "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464343824",
      "destination": "llvm::cast_and_free_pointer::node100582464217856",
      "label": "LLVM",
      "source_label": "IntraICFGNode8 {fun: cast_and_free_pointer}\nBranchStmt: [Condition Var16]\nSuccessor 0 ICFGNode9   Successor 1 ICFGNode10   \nValVar ID: 17\n   br i1 %cmp, label %if.then, label %if.end ",
      "destination_label": "IntraICFGNode9 {fun: cast_and_free_pointer}\nLoadStmt: [Var18 <-- Var9]\t\nValVar ID: 18\n   %1 = load ptr, ptr %ptr.addr, align 8 "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464384208",
      "destination": "llvm::cast_and_free_pointer::node100582464339392",
      "label": "LLVM",
      "source_label": "IntraICFGNode18 {fun: cast_and_free_pointer}\nCopyStmt: [Var27 <-- Var26]\t\nValVar ID: 27\n   %6 = bitcast ptr %5 to ptr ",
      "destination_label": "CallICFGNode19 {fun: cast_and_free_pointer}\n   call void @free(ptr noundef %6) #3 CallICFGNode: "
    },
    {
      "source": "llvm::cast_and_free_pointer::node100582464396320",
      "destination": "llvm::cast_and_free_pointer::node100582464184256",
      "label": "LLVM",
      "source_label": "IntraICFGNode21 {fun: cast_and_free_pointer}\nBranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode10   \nValVar ID: 31\n   br label %if.end ",
      "destination_label": "IntraICFGNode10 {fun: cast_and_free_pointer}\n   ret void "
    }
  ]
}