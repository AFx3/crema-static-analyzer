digraph Mir_0_6 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::vec::Vec&lt;&amp;'{erased} str, std::alloc::Global&gt;;<br align="left"/>let mut _2: std::boxed::Box&lt;[&amp;'{erased} str], std::alloc::Global&gt;;<br align="left"/>let mut _3: usize;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: *mut u8;<br align="left"/>let mut _6: std::boxed::Box&lt;[&amp;'{erased} str; 3_usize], std::alloc::Global&gt;;<br align="left"/>let mut _7: &amp;'{erased} str;<br align="left"/>let mut _8: &amp;'{erased} str;<br align="left"/>let mut _9: std::vec::IntoIter&lt;&amp;'{erased} str, std::alloc::Global&gt;;<br align="left"/>let mut _10: std::vec::IntoIter&lt;&amp;'{erased} str, std::alloc::Global&gt;;<br align="left"/>let mut _11: std::option::Option&lt;&amp;'{erased} str&gt;;<br align="left"/>let mut _12: &amp;'{erased} mut std::vec::IntoIter&lt;&amp;'{erased} str, std::alloc::Global&gt;;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: &amp;'{erased} str;<br align="left"/>let _15: *mut i8;<br align="left"/>let mut _16: std::result::Result&lt;std::ffi::CString, std::ffi::NulError&gt;;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::ffi::CString;<br align="left"/>let _19: std::ffi::NulError;<br align="left"/>let _20: log::Level;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: &amp;'{erased} log::Level;<br align="left"/>let mut _23: &amp;'{erased} log::LevelFilter;<br align="left"/>let mut _24: bool;<br align="left"/>let mut _25: &amp;'{erased} log::Level;<br align="left"/>let mut _26: &amp;'{erased} log::LevelFilter;<br align="left"/>let _27: log::LevelFilter;<br align="left"/>let _28: ();<br align="left"/>let mut _29: std::fmt::Arguments&lt;'{erased}&gt;;<br align="left"/>let _30: &amp;'{erased} [&amp;'{erased} str; 2_usize];<br align="left"/>let _31: &amp;'{erased} [core::fmt::rt::Argument&lt;'{erased}&gt;; 2_usize];<br align="left"/>let _32: [core::fmt::rt::Argument&lt;'{erased}&gt;; 2_usize];<br align="left"/>let mut _33: core::fmt::rt::Argument&lt;'{erased}&gt;;<br align="left"/>let _34: &amp;'{erased} &amp;'{erased} str;<br align="left"/>let mut _35: core::fmt::rt::Argument&lt;'{erased}&gt;;<br align="left"/>let _36: &amp;'{erased} std::ffi::NulError;<br align="left"/>let _37: &amp;'{erased} (&amp;'{erased} str, &amp;'{erased} str, &amp;'{erased} std::panic::Location&lt;'{erased}&gt;);<br align="left"/>let _38: (&amp;'{erased} str, &amp;'{erased} str, &amp;'{erased} std::panic::Location&lt;'{erased}&gt;);<br align="left"/>let mut _39: &amp;'{erased} str;<br align="left"/>let _40: &amp;'{erased} std::panic::Location&lt;'{erased}&gt;;<br align="left"/>let _41: ();<br align="left"/>let mut _42: std::fmt::Arguments&lt;'{erased}&gt;;<br align="left"/>let _43: &amp;'{erased} [&amp;'{erased} str; 3_usize];<br align="left"/>let _44: &amp;'{erased} [core::fmt::rt::Argument&lt;'{erased}&gt;; 2_usize];<br align="left"/>let _45: [core::fmt::rt::Argument&lt;'{erased}&gt;; 2_usize];<br align="left"/>let mut _46: core::fmt::rt::Argument&lt;'{erased}&gt;;<br align="left"/>let _47: &amp;'{erased} std::ffi::NulError;<br align="left"/>let mut _48: core::fmt::rt::Argument&lt;'{erased}&gt;;<br align="left"/>let _49: &amp;'{erased} &amp;'{erased} str;<br align="left"/>let _50: ();<br align="left"/>let mut _51: std::fmt::Arguments&lt;'{erased}&gt;;<br align="left"/>let _52: &amp;'{erased} [&amp;'{erased} str; 2_usize];<br align="left"/>let _53: &amp;'{erased} [core::fmt::rt::Argument&lt;'{erased}&gt;; 1_usize];<br align="left"/>let _54: [core::fmt::rt::Argument&lt;'{erased}&gt;; 1_usize];<br align="left"/>let mut _55: core::fmt::rt::Argument&lt;'{erased}&gt;;<br align="left"/>let _56: &amp;'{erased} *mut i8;<br align="left"/>let mut _57: std::ffi::CString;<br align="left"/>let mut _58: *const [&amp;'{erased} str; 3_usize];<br align="left"/>let mut _59: *const ();<br align="left"/>let mut _60: usize;<br align="left"/>let mut _61: usize;<br align="left"/>let mut _62: usize;<br align="left"/>let mut _63: usize;<br align="left"/>let mut _64: bool;<br align="left"/>debug callback_names =&gt; _1;<br align="left"/>debug iter =&gt; _10;<br align="left"/>debug name =&gt; _14;<br align="left"/>debug c_name_ptr =&gt; _15;<br align="left"/>debug cstring =&gt; _18;<br align="left"/>debug err =&gt; _19;<br align="left"/>debug lvl =&gt; _20;<br align="left"/>>;
    bb0__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = SizeOf([&amp;str; 3])<br/>_4 = AlignOf([&amp;str; 3])<br/></td></tr><tr><td align="left">_5 = alloc::alloc::exchange_malloc(move _3, move _4)</td></tr></table>>];
    bb1__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = ShallowInitBox(move _5, [&amp;str; 3])<br/>_7 = const &quot;bar&quot;<br/>_8 = const &quot;invalid\0name&quot;<br/>_58 = copy (((_6.0: std::ptr::Unique&lt;[&amp;str; 3]&gt;).0: std::ptr::NonNull&lt;[&amp;str; 3]&gt;).0: *const [&amp;str; 3])<br/>_59 = copy _58 as *const () (PtrToPtr)<br/>_60 = copy _59 as usize (Transmute)<br/>_61 = AlignOf([&amp;str; 3])<br/>_62 = Sub(copy _61, const 1_usize)<br/>_63 = BitAnd(copy _60, copy _62)<br/>_64 = Eq(copy _63, const 0_usize)<br/></td></tr><tr><td align="left">assert(copy _64, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, copy _61, copy _60)</td></tr></table>>];
    bb2__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_9 = &lt;Vec&lt;&amp;str&gt; as IntoIterator&gt;::into_iter(move _1)</td></tr></table>>];
    bb3__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_10 = move _9<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_12 = &amp;mut _10<br/></td></tr><tr><td align="left">_11 = &lt;std::vec::IntoIter&lt;&amp;str&gt; as Iterator&gt;::next(copy _12)</td></tr></table>>];
    bb5__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_13 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = copy ((_11 as Some).0: &amp;str)<br/></td></tr><tr><td align="left">_16 = CString::new::&lt;&amp;str&gt;(copy _14)</td></tr></table>>];
    bb8__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb9__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_17 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb10__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_19 = move ((_16 as Err).0: std::ffi::NulError)<br/>_20 = log::Level::Error<br/>_22 = &amp;_20<br/>_23 = const main::promoted[2]<br/></td></tr><tr><td align="left">_21 = &lt;Level as PartialOrd&lt;LevelFilter&gt;&gt;::le(move _22, move _23)</td></tr></table>>];
    bb11__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_18 = move ((_16 as Ok).0: std::ffi::CString)<br/></td></tr><tr><td align="left">_15 = CString::into_raw(move _18)</td></tr></table>>];
    bb12__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_52 = const main::promoted[3]<br/>_56 = &amp;_15<br/></td></tr><tr><td align="left">_55 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;*mut i8&gt;(copy _56)</td></tr></table>>];
    bb13__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb14__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_25 = &amp;_20<br/></td></tr><tr><td align="left">_27 = max_level()</td></tr></table>>];
    bb15__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_26 = &amp;_27<br/></td></tr><tr><td align="left">_24 = &lt;Level as PartialOrd&lt;LevelFilter&gt;&gt;::le(move _25, move _26)</td></tr></table>>];
    bb16__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb17__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_30 = const main::promoted[1]<br/>_34 = &amp;_14<br/></td></tr><tr><td align="left">_33 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;str&gt;(copy _34)</td></tr></table>>];
    bb18__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_36 = &amp;_19<br/></td></tr><tr><td align="left">_35 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;NulError&gt;(copy _36)</td></tr></table>>];
    bb19__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_32 = [move _33, move _35]<br/>_31 = &amp;_32<br/></td></tr><tr><td align="left">_29 = Arguments::&lt;'_&gt;::new_v1::&lt;2, 2&gt;(copy _30, copy _31)</td></tr></table>>];
    bb20__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_39 = const &quot;cstringcargo_enum&quot;<br/></td></tr><tr><td align="left">_40 = loc()</td></tr></table>>];
    bb21__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_38 = (move _39, const &quot;cstringcargo_enum&quot;, copy _40)<br/>_37 = &amp;_38<br/></td></tr><tr><td align="left">_28 = log::__private_api::log::&lt;'_, (), GlobalLogger&gt;(const GlobalLogger, move _29, copy _20, copy _37, const ())</td></tr></table>>];
    bb22__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_43 = const main::promoted[0]<br/>_47 = &amp;_19<br/></td></tr><tr><td align="left">_46 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;NulError&gt;(copy _47)</td></tr></table>>];
    bb23__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_49 = &amp;_14<br/></td></tr><tr><td align="left">_48 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;&amp;str&gt;(copy _49)</td></tr></table>>];
    bb24__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_45 = [move _46, move _48]<br/>_44 = &amp;_45<br/></td></tr><tr><td align="left">_42 = Arguments::&lt;'_&gt;::new_v1::&lt;3, 2&gt;(copy _43, copy _44)</td></tr></table>>];
    bb25__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left">_41 = _print(move _42)</td></tr></table>>];
    bb26__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb27__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_54 = [move _55]<br/>_53 = &amp;_54<br/></td></tr><tr><td align="left">_51 = Arguments::&lt;'_&gt;::new_v1::&lt;2, 1&gt;(copy _52, copy _53)</td></tr></table>>];
    bb28__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left">_50 = _print(move _51)</td></tr></table>>];
    bb29__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left">_57 = CString::from_raw(copy _15)</td></tr></table>>];
    bb30__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left">drop(_57)</td></tr></table>>];
    bb31__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">return</td></tr></table>>];
    bb32__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">drop(_19)</td></tr></table>>];
    bb33__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">33 (cleanup)</td></tr><tr><td align="left">drop(_10)</td></tr></table>>];
    bb34__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">34 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb35__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">(*_58) = [const &quot;foo&quot;, move _7, move _8]<br/>_2 = move _6 as std::boxed::Box&lt;[&amp;str]&gt; (PointerCoercion(Unsize, Implicit))<br/></td></tr><tr><td align="left">_1 = slice::&lt;impl [&amp;str]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _2)</td></tr></table>>];
    bb36__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_6 -> bb1__0_6 [label="return"];
    bb1__0_6 -> bb35__0_6 [label="success"];
    bb2__0_6 -> bb3__0_6 [label="return"];
    bb3__0_6 -> bb4__0_6 [label=""];
    bb4__0_6 -> bb5__0_6 [label="return"];
    bb4__0_6 -> bb33__0_6 [label="unwind"];
    bb5__0_6 -> bb8__0_6 [label="0"];
    bb5__0_6 -> bb7__0_6 [label="1"];
    bb5__0_6 -> bb6__0_6 [label="otherwise"];
    bb7__0_6 -> bb9__0_6 [label="return"];
    bb7__0_6 -> bb33__0_6 [label="unwind"];
    bb8__0_6 -> bb31__0_6 [label="return"];
    bb9__0_6 -> bb11__0_6 [label="0"];
    bb9__0_6 -> bb10__0_6 [label="1"];
    bb9__0_6 -> bb6__0_6 [label="otherwise"];
    bb10__0_6 -> bb13__0_6 [label="return"];
    bb10__0_6 -> bb32__0_6 [label="unwind"];
    bb11__0_6 -> bb12__0_6 [label="return"];
    bb11__0_6 -> bb33__0_6 [label="unwind"];
    bb12__0_6 -> bb27__0_6 [label="return"];
    bb12__0_6 -> bb33__0_6 [label="unwind"];
    bb13__0_6 -> bb22__0_6 [label="0"];
    bb13__0_6 -> bb14__0_6 [label="otherwise"];
    bb14__0_6 -> bb15__0_6 [label="return"];
    bb14__0_6 -> bb32__0_6 [label="unwind"];
    bb15__0_6 -> bb16__0_6 [label="return"];
    bb15__0_6 -> bb32__0_6 [label="unwind"];
    bb16__0_6 -> bb22__0_6 [label="0"];
    bb16__0_6 -> bb17__0_6 [label="otherwise"];
    bb17__0_6 -> bb18__0_6 [label="return"];
    bb17__0_6 -> bb32__0_6 [label="unwind"];
    bb18__0_6 -> bb19__0_6 [label="return"];
    bb18__0_6 -> bb32__0_6 [label="unwind"];
    bb19__0_6 -> bb20__0_6 [label="return"];
    bb19__0_6 -> bb32__0_6 [label="unwind"];
    bb20__0_6 -> bb21__0_6 [label="return"];
    bb20__0_6 -> bb32__0_6 [label="unwind"];
    bb21__0_6 -> bb36__0_6 [label="return"];
    bb21__0_6 -> bb32__0_6 [label="unwind"];
    bb22__0_6 -> bb23__0_6 [label="return"];
    bb22__0_6 -> bb32__0_6 [label="unwind"];
    bb23__0_6 -> bb24__0_6 [label="return"];
    bb23__0_6 -> bb32__0_6 [label="unwind"];
    bb24__0_6 -> bb25__0_6 [label="return"];
    bb24__0_6 -> bb32__0_6 [label="unwind"];
    bb25__0_6 -> bb26__0_6 [label="return"];
    bb25__0_6 -> bb32__0_6 [label="unwind"];
    bb26__0_6 -> bb4__0_6 [label="return"];
    bb26__0_6 -> bb33__0_6 [label="unwind"];
    bb27__0_6 -> bb28__0_6 [label="return"];
    bb27__0_6 -> bb33__0_6 [label="unwind"];
    bb28__0_6 -> bb29__0_6 [label="return"];
    bb28__0_6 -> bb33__0_6 [label="unwind"];
    bb29__0_6 -> bb30__0_6 [label="return"];
    bb29__0_6 -> bb33__0_6 [label="unwind"];
    bb30__0_6 -> bb4__0_6 [label="return"];
    bb30__0_6 -> bb33__0_6 [label="unwind"];
    bb32__0_6 -> bb33__0_6 [label="return"];
    bb33__0_6 -> bb34__0_6 [label="return"];
    bb35__0_6 -> bb2__0_6 [label="return"];
    bb36__0_6 -> bb22__0_6 [label=""];
}
